@use 'sass:math';

// Rem Calculation of Pixel Values
$rem-base: 16px;

@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

@function convert-to-rem($value, $base-value: $rem-base, $limit: true) {
	@if abs($value) < 8 and $limit {
		@return $value * 1px;
	}

	$value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;

	@return $value;
}

@function rem-calc($values, $limit: true, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value, $limit);
	}

	$remValues: ();

	@for $i from 1 through $max {
		$remValues: append(
			$remValues,
			convert-to-rem(nth($values, $i), $base-value)
		);
	}

	@return $remValues;
}

///
/// Returns a calc that translates into a fluid value between two breakpoints/limits.
/// Commonly used for fluid typography - https://css-tricks.com/simplified-fluid-typography/
/// Example usage: font-size: fluid('phone-small', 'tablet', 12px, 18px);
///                line-height: fluid('phone-small', '1800px', 12px, 18px);
/// Note that this is a linear function that will not stop growing/shrinking before or after the given breakpoints.
///
/// @param {Pixel Value} $min-value - The the minimum value that starts from the distance starting point.
/// @param {Pixel Value} $max-value - The the maximum value that ends for the distance ending point.
/// @param {String} $min-breakpoint - Where the distance starts to be calculated from.
/// @param {String} $max-breakpoint - Where the distance ends.
/// @return {String} - The calc() CSS operation with crazy mathz.
///
@function fluid($min-value, $max-value, $min-breakpoint: 'phone-xsmall', $max-breakpoint: 'desktop-xlarge') {
	@if $min-value == 0 {
		$min-value: 0.001;
	}

	@if $max-value == 0 {
		$max-value: 0.001;
	}

	$min-vw: 0;
	$max-vw: 0;

	@if map-has-key($breakpoints, $min-breakpoint) {
		$min-vw: map-get($breakpoints, $min-breakpoint);
	} @else {
		$min-vw: calc($min-breakpoint / 16) * 1rem;
	}

	@if map-has-key($breakpoints, $max-breakpoint) {
		$max-vw: map-get($breakpoints, $max-breakpoint);
	} @else {
		$max-vw: calc($max-breakpoint / 16) * 1rem;
	}

	$base-min-value: rem-calc($min-value, false);
	$base-max-value: rem-calc($max-value, false);

	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($base-min-value);
	$u4: unit($base-max-value);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		$fluid-base: calc(
			#{$base-min-value} + #{(strip-unit($base-max-value) - strip-unit($base-min-value))}
			* ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
		);

		@if $min-value < $max-value {
			@return min($fluid-base, rem-calc($max-value));
		} @else {
			@return clamp(rem-calc($max-value), $fluid-base, rem-calc($min-value));
		}
	} @else {
		@error 'Invalid fluid() declaration.';
		@return 0;
	}
}
